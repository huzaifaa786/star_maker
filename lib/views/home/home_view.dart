import 'dart:async';
import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:simple_gradient_text/simple_gradient_text.dart';
import 'package:star_maker/routes/routes.dart';
import 'package:star_maker/utils/zegocloud_token.dart';
import 'package:star_maker/views/live_room/multi_singer_room/internal/internal_defines.dart';
import 'package:star_maker/views/live_room/multi_singer_room/internal/sdk/zim/zim_service.dart';
import 'package:star_maker/views/live_room/multi_singer_room/internal/zego_sdk_key_center.dart';
import 'package:star_maker/views/live_room/multi_singer_room/internal/zego_sdk_manager.dart';
import 'package:star_maker/widgets/buttons/main_button.dart';

class HomeView extends StatefulWidget {
  const HomeView({super.key});

  @override
  State<HomeView> createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {
  List<StreamSubscription> subscriptions = [];
  final userIDController =
      TextEditingController(text: Random().nextInt(100000).toString());
  final userNameController = TextEditingController(
      text: Random().nextInt(100000).toString() + "_user");
  bool isConnected = false;

  loginUser() async {
    // init SDK
    await ZEGOSDKManager()
        .init(SDKKeyCenter.appID, kIsWeb ? null : SDKKeyCenter.appSign);

    String? token;
    if (kIsWeb) {
      // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
      // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
      token = ZegoTokenUtils.generateToken(
          SDKKeyCenter.appID, SDKKeyCenter.serverSecret, userIDController.text);
    }
    ZEGOSDKManager()
        .connectUser(userIDController.text, userNameController.text,
            token: token)
        .then((_) {
      ZEGOSDKManager().zimService.updateUserAvatarUrl(
          'https://robohash.org/${userIDController.text}.png?set=set4');
      setState(() {});
    }).catchError((error) {
      setState(() {});
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('connectUser failed: $error')));
    });
  }

  @override
  void initState() {
    super.initState();
    subscriptions.addAll([
      ZEGOSDKManager()
          .zimService
          .connectionStateStreamCtrl
          .stream
          .listen((ZIMServiceConnectionStateChangedEvent event) {
        if (event.state == ZIMConnectionState.connected) {
          isConnected = true;
        }
      })
    ]);
    loginUser();
  }

  @override
  void dispose() {
    for (final element in subscriptions) {
      element.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Container(
          color: Colors.grey[100],
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              Gap(150),
              GradientText(
                'Star Maker',
                style: TextStyle(
                  fontWeight: FontWeight.w700,
                  fontSize: 45,
                ),
                colors: [Colors.deepPurple, Colors.pinkAccent],
              ),
              Gap(150),
              MainButton(
                title: 'Create/Join Live Room',
                onButtonTap: () {
                  AppRoutes.navigateToJoinOrCreateLiveRoom(context);
                },
                icon: CupertinoIcons.music_house,
              ),
              const Gap(20),
              MainButton(
                title: 'Solo Singing',
                onButtonTap: () {
                  AppRoutes.navigateToSoloSinging(context);
                },
                icon: CupertinoIcons.music_mic,
              ),
              const Gap(40),
            ],
          ),
        ),
      ),
    );
  }
}
